<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [tester_f373\tester_f373.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image tester_f373\tester_f373.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Tue Aug 29 10:47:47 2023
<BR><P>
<H3>Maximum Stack Usage =       2832 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
brdCmdU8 &rArr; brdCmd &rArr; stmFlsh_Cmd &rArr; stmFlsh_write &rArr; stmFlsh_format &rArr; log &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[fe]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[20]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[13b]">UART_EndRxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13b]">UART_EndRxTransfer</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from stm32f3xx_it.o(i.BusFault_Handler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[22]">CAN_RX0_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[23]">CAN_RX1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[24]">CAN_SCE_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[21]">CAN_TX_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[38]">CEC_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[48]">COMP_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[19]">DMA1_Channel1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel3_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel4_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel5_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel6_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel7_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[40]">DMA2_Channel1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[41]">DMA2_Channel2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[42]">DMA2_Channel3_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[43]">DMA2_Channel4_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[44]">DMA2_Channel5_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from stm32f3xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[16]">EXTI2_TSC_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[25]">EXTI9_5_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4d]">FPU_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from stm32f3xx_it.o(i.HardFault_Handler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[30]">I2C2_ER_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[2f]">I2C2_EV_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from stm32f3xx_it.o(i.MemManage_Handler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from stm32f3xx_it.o(i.NMI_Handler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[f]">PVD_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from stm32f3xx_it.o(i.PendSV_Handler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[37]">RTC_Alarm_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[11]">RTC_WKUP_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[45]">SDADC1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[46]">SDADC2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[47]">SDADC3_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from stm32f3xx_it.o(i.SPI1_IRQHandler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[32]">SPI2_IRQHandler</a> from stm32f3xx_it.o(i.SPI2_IRQHandler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[5f]">SPI_DMAAbortOnError</a> from stm32f3xx_hal_spi.o(i.SPI_DMAAbortOnError) referenced from stm32f3xx_hal_spi.o(i.HAL_SPI_IRQHandler)
 <LI><a href="#[a]">SVC_Handler</a> from stm32f3xx_it.o(i.SVC_Handler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from stm32f3xx_it.o(i.SysTick_Handler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4e]">SystemInit</a> from system_stm32f3xx.o(i.SystemInit) referenced from startup_stm32f373xc.o(.text)
 <LI><a href="#[10]">TAMP_STAMP_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[39]">TIM12_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[3a]">TIM13_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[3b]">TIM14_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[26]">TIM15_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[27]">TIM16_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[28]">TIM17_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[29]">TIM18_DAC2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4c]">TIM19_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[2b]">TIM3_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[2c]">TIM4_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[3e]">TIM6_DAC1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[3f]">TIM7_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[61]">UART_DMAAbortOnError</a> from stm32f3xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f3xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[60]">UART_DMARxOnlyAbortCallback</a> from stm32f3xx_hal_uart.o(i.UART_DMARxOnlyAbortCallback) referenced from stm32f3xx_hal_uart.o(i.HAL_UART_AbortReceive_IT)
 <LI><a href="#[6b]">UART_RxISR_16BIT</a> from stm32f3xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32f3xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[6a]">UART_RxISR_8BIT</a> from stm32f3xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32f3xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[63]">UART_TxISR_16BIT</a> from stm32f3xx_hal_uart.o(i.UART_TxISR_16BIT) referenced from stm32f3xx_hal_uart.o(i.HAL_UART_Transmit_IT)
 <LI><a href="#[62]">UART_TxISR_8BIT</a> from stm32f3xx_hal_uart.o(i.UART_TxISR_8BIT) referenced from stm32f3xx_hal_uart.o(i.HAL_UART_Transmit_IT)
 <LI><a href="#[33]">USART1_IRQHandler</a> from stm32f3xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from stm32f3xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[35]">USART3_IRQHandler</a> from stm32f3xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4b]">USBWakeUp_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[49]">USB_HP_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4a]">USB_LP_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from stm32f3xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[98]">__main</a> from __main.o(!!!main) referenced from startup_stm32f373xc.o(.text)
 <LI><a href="#[56]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[53]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[52]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[54]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[51]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[50]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[57]">adcDevRead</a> from adc_dev.o(i.adcDevRead) referenced from adc_dev.o(i.ADC_Setup)
 <LI><a href="#[58]">adcDevReadRaw</a> from adc_dev.o(i.adcDevReadRaw) referenced from adc_dev.o(i.ADC_Setup)
 <LI><a href="#[59]">adcDevStart</a> from adc_dev.o(i.adcDevStart) referenced from adc_dev.o(i.ADC_Setup)
 <LI><a href="#[5a]">adcDevStop</a> from adc_dev.o(i.adcDevStop) referenced from adc_dev.o(i.ADC_Setup)
 <LI><a href="#[6c]">adcDevTimHandler</a> from adc_dev.o(i.adcDevTimHandler) referenced from adc_dev.o(i.adcDevStart)
 <LI><a href="#[5b]">adcDev_cal_gain</a> from adc_dev.o(i.adcDev_cal_gain) referenced from adc_dev.o(i.ADC_Setup)
 <LI><a href="#[5c]">adcDev_cal_offset</a> from adc_dev.o(i.adcDev_cal_offset) referenced from adc_dev.o(i.ADC_Setup)
 <LI><a href="#[5d]">adcSaveCal</a> from adc_dev.o(i.adcSaveCal) referenced from adc_dev.o(i.ADC_Setup)
 <LI><a href="#[5e]">adc_cal_reset</a> from adc_dev.o(i.adc_cal_reset) referenced from adc_dev.o(i.ADC_Setup)
 <LI><a href="#[8d]">appTmr_isr</a> from app_timer.o(i.appTmr_isr) referenced from app_timer.o(i.setup_appTmr)
 <LI><a href="#[8e]">appTmr_polling</a> from app_timer.o(i.appTmr_polling) referenced from app_timer.o(i.setup_appTmr)
 <LI><a href="#[8f]">appTmr_start</a> from app_timer.o(i.appTmr_start) referenced from app_timer.o(i.setup_appTmr)
 <LI><a href="#[91]">appTmr_status</a> from app_timer.o(i.appTmr_status) referenced from app_timer.o(i.setup_appTmr)
 <LI><a href="#[90]">appTmr_stop</a> from app_timer.o(i.appTmr_stop) referenced from app_timer.o(i.setup_appTmr)
 <LI><a href="#[75]">brdCmdU8</a> from board.o(i.brdCmdU8) referenced from board.o(i.boardInit)
 <LI><a href="#[79]">cmdConsumerTmr_handle</a> from cmd_consumer.o(i.cmdConsumerTmr_handle) referenced from cmd_consumer.o(i.cmdConsumer_start)
 <LI><a href="#[94]">cmdConsumer_append</a> from cmd_consumer.o(i.cmdConsumer_append) referenced from cmd_consumer.o(i.setup_cmdConsumer)
 <LI><a href="#[95]">cmdConsumer_remove</a> from cmd_consumer.o(i.cmdConsumer_remove) referenced from cmd_consumer.o(i.setup_cmdConsumer)
 <LI><a href="#[92]">cmdConsumer_start</a> from cmd_consumer.o(i.cmdConsumer_start) referenced from cmd_consumer.o(i.setup_cmdConsumer)
 <LI><a href="#[93]">cmdConsumer_stop</a> from cmd_consumer.o(i.cmdConsumer_stop) referenced from cmd_consumer.o(i.setup_cmdConsumer)
 <LI><a href="#[7e]">cw221X_startActive</a> from cw2217.o(i.cw221X_startActive) referenced from cw2217.o(i.cw2217_setup)
 <LI><a href="#[7a]">cw_get_chip_id</a> from cw2217.o(i.cw_get_chip_id) referenced from cw2217.o(i.cw2217_setup)
 <LI><a href="#[7b]">cw_get_voltage</a> from cw2217.o(i.cw_get_voltage) referenced from cw2217.o(i.cw2217_setup)
 <LI><a href="#[7f]">cw_init</a> from cw2217.o(i.cw_init) referenced from cw2217.o(i.cw2217_setup)
 <LI><a href="#[7d]">cw_update_data</a> from cw2217.o(i.cw_update_data) referenced from cw2217.o(i.cw2217_setup)
 <LI><a href="#[7c]">cw_write_profile</a> from cw2217.o(i.cw_write_profile) referenced from cw2217.o(i.cw2217_setup)
 <LI><a href="#[74]">fetchLineFromRingBufferU8</a> from uartdev.o(i.fetchLineFromRingBufferU8) referenced from board.o(i.boardInit)
 <LI><a href="#[72]">forwardToBus</a> from board.o(i.forwardToBus) referenced from board.o(i.boardInit)
 <LI><a href="#[64]">iic_io_Read</a> from iic_io.o(i.iic_io_Read) referenced from iic_io.o(i.IIC_IO_Setup)
 <LI><a href="#[66]">iic_io_Read_Reg16</a> from iic_io.o(i.iic_io_Read_Reg16) referenced from iic_io.o(i.IIC_IO_Setup)
 <LI><a href="#[65]">iic_io_Write</a> from iic_io.o(i.iic_io_Write) referenced from iic_io.o(i.IIC_IO_Setup)
 <LI><a href="#[67]">iic_io_Write_Reg16</a> from iic_io.o(i.iic_io_Write_Reg16) referenced from iic_io.o(i.IIC_IO_Setup)
 <LI><a href="#[68]">inputPolling</a> from input.o(i.inputPolling) referenced from input.o(i.InputDevSetup)
 <LI><a href="#[69]">inputReadPin</a> from input.o(i.inputReadPin) referenced from input.o(i.InputDevSetup)
 <LI><a href="#[55]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[80]">led_flash_handler</a> from led_flash.o(i.led_flash_handler) referenced from led_flash.o(i.led_flash_setTickTmr)
 <LI><a href="#[76]">outputCmdU8</a> from outputcmd.o(i.outputCmdU8) referenced from board.o(i.boardInit)
 <LI><a href="#[83]">outputTogglePin</a> from output.o(i.outputTogglePin) referenced from output.o(i.outputDevSetup)
 <LI><a href="#[82]">outputWritePin</a> from output.o(i.outputWritePin) referenced from output.o(i.outputDevSetup)
 <LI><a href="#[81]">outputWritePinHEX</a> from output.o(i.outputWritePinHEX) referenced from output.o(i.outputDevSetup)
 <LI><a href="#[73]">print</a> from board.o(i.print) referenced from board.o(i.boardInit)
 <LI><a href="#[73]">print</a> from board.o(i.print) referenced from board.o(i.brdCmd)
 <LI><a href="#[6d]">printS</a> from board.o(i.printS) referenced from board.o(i.boardInit)
 <LI><a href="#[6f]">stmFlsh_read</a> from stm_flash.o(i.stmFlsh_read) referenced from board.o(i.boardInit)
 <LI><a href="#[6e]">stmFlsh_write</a> from stm_flash.o(i.stmFlsh_write) referenced from board.o(i.boardInit)
 <LI><a href="#[78]">taskPolling</a> from task.o(i.taskPolling) referenced from board.o(i.boardPreInit)
 <LI><a href="#[77]">testHandler</a> from board.o(i.testHandler) referenced from board.o(i.boardInit)
 <LI><a href="#[96]">threadPollingHanlder</a> from thread_delay.o(i.threadPollingHanlder) referenced from thread_delay.o(i.thread_delay_init)
 <LI><a href="#[8a]">uartIsTxRBuffEmpty</a> from uartdev.o(i.uartIsTxRBuffEmpty) referenced from uartdev.o(i.setupUartDev)
 <LI><a href="#[97]">uartPolling</a> from uartdev.o(i.uartPolling) referenced from uartdev.o(i.uartStartRecv)
 <LI><a href="#[87]">uartRxFetchFrame</a> from uartdev.o(i.uartRxFetchFrame) referenced from uartdev.o(i.setupUartDev)
 <LI><a href="#[86]">uartRxFetchLine</a> from uartdev.o(i.uartRxFetchLine) referenced from uartdev.o(i.setupUartDev)
 <LI><a href="#[85]">uartRxMonitor</a> from uartdev.o(i.uartRxMonitor) referenced from uartdev.o(i.setupUartDev)
 <LI><a href="#[89]">uartSend</a> from uartdev.o(i.uartSend) referenced from uartdev.o(i.setupUartDev)
 <LI><a href="#[8b]">uartStartRecv</a> from uartdev.o(i.uartStartRecv) referenced from uartdev.o(i.setupUartDev)
 <LI><a href="#[8c]">uartTestRestartRecv</a> from uartdev.o(i.uartTestRestartRecv) referenced from uartdev.o(i.setupUartDev)
 <LI><a href="#[84]">uartTxPolling</a> from uartdev.o(i.uartTxPolling) referenced from uartdev.o(i.setupUartDev)
 <LI><a href="#[88]">uartTxSendFrame</a> from uartdev.o(i.uartTxSendFrame) referenced from uartdev.o(i.setupUartDev)
 <LI><a href="#[71]">usrRead</a> from disk.o(i.usrRead) referenced from board.o(i.boardInit)
 <LI><a href="#[70]">usrWrite</a> from disk.o(i.usrWrite) referenced from board.o(i.boardInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[98]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[99]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[9b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[19b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[19c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[19d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9d]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[ee]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[9f]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[a1]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a3]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a4]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a5]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[19e]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[a7]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a9]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[aa]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ab]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[ad]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[af]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b1]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b2]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b3]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[b5]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[19f]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[b7]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[b9]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[bb]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[bd]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[1a0]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[c9]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[bf]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1a1]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1a2]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1a3]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1a4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1a5]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ce]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1b5]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1b6]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1b7]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1b8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1b9]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1ba]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[9a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1bb]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[c6]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c8]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1bc]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[ca]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; boardInit &rArr; ADC_Setup &rArr; log &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1bd]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ff]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[cd]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1be]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[cf]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SDADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SDADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SDADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM18_DAC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM19_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM6_DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[fe]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f373xc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[1bf]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[1c0]"></a>_ll_ushift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_get_current
</UL>

<P><STRONG><a name="[d1]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[d3]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strFormat
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_raw
</UL>

<P><STRONG><a name="[d6]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_Cmd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dev_cmd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brdCmd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputCmd
</UL>

<P><STRONG><a name="[d8]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[18a]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetchLineFromRingBuffer
</UL>

<P><STRONG><a name="[18d]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetchLineFromRingBufferX
</UL>

<P><STRONG><a name="[153]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputDevSetup
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDevSetup
</UL>

<P><STRONG><a name="[17d]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printS
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brdCmd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputCmd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetchLineFromRingBuffer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRxFetchLine
</UL>

<P><STRONG><a name="[16f]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_Cmd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dev_cmd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brdCmd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputCmd
</UL>

<P><STRONG><a name="[192]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_write
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_read
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_PopMult
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_InsertMult
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Insert
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[da]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1c1]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetchLineFromRingBuffer
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRxFetchFrame
</UL>

<P><STRONG><a name="[dc]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1c2]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1c3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStartRecv
</UL>

<P><STRONG><a name="[df]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1c6]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_Cmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_cmdConsumer
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_appTmr
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputDevSetup
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw2217_setup
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dev_cmd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDevSetup
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Setup
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetchLineFromRingBufferX
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdConsumerTmr_handle
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_raw
</UL>

<P><STRONG><a name="[1c7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1c9]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[e3]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[e4]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e5]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e1]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[a8]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[9e]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[d4]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[d5]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[50]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[e8]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[b0]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[eb]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[ac]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[b4]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[ec]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[ae]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[b6]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[a0]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[e7]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[d9]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[d7]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[51]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[1cc]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[de]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[1ce]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[55]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[e6]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1cf]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[fa]"></a>_printf_fp_hex_real</STRONG> (Thumb, 754 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[fb]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[b8]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[ba]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[fc]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[bc]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[be]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[ef]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[e9]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[c7]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[f1]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[c2]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[f9]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[f3]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cc]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1d0]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1d1]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[d0]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1d2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[101]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[100]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[102]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[103]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[f5]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f6]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[104]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[108]"></a>ADC_Setup</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, adc_dev.o(i.ADC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = ADC_Setup &rArr; log &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcSaveCal
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDevStart
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
</UL>

<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>CRC16</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, crc16.o(i.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Setup
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcSaveCal
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxSendFrame
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRxFetchFrame
</UL>

<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>FLASH_PageErase</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f3xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[10d]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f3xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[10c]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32f3xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Setup
</UL>

<P><STRONG><a name="[155]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, stm32f3xx_hal_adc_ex.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[16b]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f3xx_hal_adc_ex.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDevTimHandler
</UL>

<P><STRONG><a name="[10f]"></a>HAL_ADC_Init</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, stm32f3xx_hal_adc_ex.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[110]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, stm32f3xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[112]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, stm32f3xx_hal_adc_ex.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDevTimHandler
</UL>

<P><STRONG><a name="[113]"></a>HAL_ADC_Start</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32f3xx_hal_adc_ex.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDevTimHandler
</UL>

<P><STRONG><a name="[114]"></a>HAL_ADC_Stop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f3xx_hal_adc_ex.o(i.HAL_ADC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_Stop &rArr; ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDevStop
</UL>

<P><STRONG><a name="[117]"></a>HAL_CRCEx_Polynomial_Set</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, stm32f3xx_hal_crc_ex.o(i.HAL_CRCEx_Polynomial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[115]"></a>HAL_CRC_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32f3xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f3xx_hal_msp.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[13d]"></a>HAL_DMA_Abort</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f3xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f3xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
</UL>

<P><STRONG><a name="[118]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f3xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_format
</UL>

<P><STRONG><a name="[197]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f3xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_format
</UL>

<P><STRONG><a name="[11b]"></a>HAL_FLASH_Program</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, stm32f3xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_write
</UL>

<P><STRONG><a name="[196]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f3xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_format
</UL>

<P><STRONG><a name="[111]"></a>HAL_GPIO_Init</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, stm32f3xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as_OUTPUT_OD_NOPULL_HIGH
</UL>

<P><STRONG><a name="[14e]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f3xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputPolling
</UL>

<P><STRONG><a name="[191]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f3xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_handler
</UL>

<P><STRONG><a name="[14b]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f3xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as_OUTPUT_OD_NOPULL_HIGH
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicioRead
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_STOP
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RESTART
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputWritePinHEX
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputWritePin
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputTogglePin
</UL>

<P><STRONG><a name="[106]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f3xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_write
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_config_start_ic
</UL>

<P><STRONG><a name="[164]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f3xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11e]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f3xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f3xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[121]"></a>HAL_MspInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f3xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12e]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f3xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[123]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f3xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[11f]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f3xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[180]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f3xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brdCmd
</UL>

<P><STRONG><a name="[125]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, stm32f3xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[126]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, stm32f3xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[169]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f3xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[16a]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f3xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[127]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f3xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[128]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1480 bytes, Stack size 40 bytes, stm32f3xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[12b]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
</UL>

<P><STRONG><a name="[129]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, stm32f3xx_hal_spi.o(i.HAL_SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SPI_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>HAL_SPI_Init</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, stm32f3xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[12d]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, stm32f3xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[122]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f3xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[15a]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f3xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
</UL>

<P><STRONG><a name="[12f]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, stm32f3xx_hal_msp.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
</UL>

<P><STRONG><a name="[130]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
</UL>

<P><STRONG><a name="[135]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
</UL>

<P><STRONG><a name="[136]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f3xx_hal_msp.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[13e]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[13f]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>HAL_UART_AbortReceiveCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_uart.o(i.HAL_UART_AbortReceiveCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxOnlyAbortCallback
</UL>

<P><STRONG><a name="[138]"></a>HAL_UART_AbortReceive_IT</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f3xx_hal_uart.o(i.HAL_UART_AbortReceive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_AbortReceive_IT &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceiveCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTestRestartRecv
</UL>

<P><STRONG><a name="[13c]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[13a]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 686 bytes, Stack size 24 bytes, stm32f3xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>HAL_UART_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f3xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[142]"></a>HAL_UART_MspInit</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, stm32f3xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[146]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f3xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStartRecv
</UL>

<P><STRONG><a name="[168]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[199]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f3xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxPolling
</UL>

<P><STRONG><a name="[140]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, board.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[148]"></a>IIC_IO_Setup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iic_io.o(i.IIC_IO_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IIC_IO_Setup &rArr; as_OUTPUT_OD_NOPULL_HIGH &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as_OUTPUT_OD_NOPULL_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
</UL>

<P><STRONG><a name="[152]"></a>InputDevSetup</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, input.o(i.InputDevSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = InputDevSetup &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
</UL>

<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[194]"></a>RingBuffer_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ring_buffer.o(i.RingBuffer_Init))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupUartDev
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStartRecv
</UL>

<P><STRONG><a name="[15e]"></a>RingBuffer_Insert</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ring_buffer.o(i.RingBuffer_Insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBuffer_Insert
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsFull
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetchLineFromRingBufferX
</UL>

<P><STRONG><a name="[160]"></a>RingBuffer_InsertMult</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ring_buffer.o(i.RingBuffer_InsertMult))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RingBuffer_InsertMult
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsFull
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetchLineFromRingBufferX
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetchLineFromRingBuffer
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSend
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRxMonitor
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRxFetchFrame
</UL>

<P><STRONG><a name="[161]"></a>RingBuffer_Pop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ring_buffer.o(i.RingBuffer_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBuffer_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsEmpty
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetchLineFromRingBufferX
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetchLineFromRingBuffer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRxMonitor
</UL>

<P><STRONG><a name="[163]"></a>RingBuffer_PopMult</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ring_buffer.o(i.RingBuffer_PopMult))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RingBuffer_PopMult
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsEmpty
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetchLineFromRingBufferX
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetchLineFromRingBuffer
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxPolling
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRxFetchFrame
</UL>

<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI1_IRQHandler &rArr; HAL_SPI_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI2_IRQHandler &rArr; HAL_SPI_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Handler &rArr; taskIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskIrq
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[166]"></a>SystemClock_Config</STRONG> (Thumb, 124 bytes, Stack size 120 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_stm32f3xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(.text)
</UL>
<P><STRONG><a name="[137]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f3xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[132]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f3xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[144]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32f3xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[145]"></a>UART_CheckIdleState</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, stm32f3xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[143]"></a>UART_SetConfig</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f3xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[147]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32f3xx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[167]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32f3xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[ed]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[16e]"></a>adc_dev_cmd</STRONG> (Thumb, 470 bytes, Stack size 72 bytes, adc_dev_cmd.o(i.adc_dev_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = adc_dev_cmd &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brdCmd
</UL>

<P><STRONG><a name="[149]"></a>as_OUTPUT_OD_NOPULL_HIGH</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, gpiodecal.o(i.as_OUTPUT_OD_NOPULL_HIGH))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = as_OUTPUT_OD_NOPULL_HIGH &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_IO_Setup
</UL>

<P><STRONG><a name="[170]"></a>boardInit</STRONG> (Thumb, 444 bytes, Stack size 48 bytes, board.o(i.boardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = boardInit &rArr; ADC_Setup &rArr; log &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strFormat
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_cmdConsumer
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupUartDev
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputDevSetup
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logInitial
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_setup
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw2217_setup
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDevSetup
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_IO_Setup
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Setup
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printS
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[179]"></a>boardPreInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, board.o(i.boardPreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = boardPreInit &rArr; setup_appTmr &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_delay_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_appTmr
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17c]"></a>brdCmd</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, board.o(i.brdCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2832 + Unknown Stack Size
<LI>Call Chain = brdCmd &rArr; stmFlsh_Cmd &rArr; stmFlsh_write &rArr; stmFlsh_format &rArr; log &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_format
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_Cmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_answer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioWriteReg
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioReadReg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dev_cmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brdCmdU8
</UL>

<P><STRONG><a name="[175]"></a>cw2217_setup</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cw2217.o(i.cw2217_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cw2217_setup &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
</UL>

<P><STRONG><a name="[174]"></a>disk_setup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, disk.o(i.disk_setup))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
</UL>

<P><STRONG><a name="[189]"></a>fetchLineFromRingBuffer</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, uartdev.o(i.fetchLineFromRingBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fetchLineFromRingBuffer &rArr; RingBuffer_PopMult
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_PopMult
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_InsertMult
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetchLineFromRingBufferU8
</UL>

<P><STRONG><a name="[74]"></a>fetchLineFromRingBufferU8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uartdev.o(i.fetchLineFromRingBufferU8))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fetchLineFromRingBufferU8 &rArr; fetchLineFromRingBuffer &rArr; RingBuffer_PopMult
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetchLineFromRingBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.boardInit)
</UL>
<P><STRONG><a name="[18c]"></a>fetchLineFromRingBufferX</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, uartdev.o(i.fetchLineFromRingBufferX))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fetchLineFromRingBufferX &rArr; RingBuffer_PopMult
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_PopMult
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_InsertMult
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Insert
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRxFetchLine
</UL>

<P><STRONG><a name="[182]"></a>ioReadReg</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, disk.o(i.ioReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ioReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brdCmd
</UL>

<P><STRONG><a name="[181]"></a>ioWriteReg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, disk.o(i.ioWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ioWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brdCmd
</UL>

<P><STRONG><a name="[17f]"></a>led_flash_answer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_flash.o(i.led_flash_answer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_flash_answer &rArr; led_flash_setTickTmr
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_setTickTmr
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brdCmd
</UL>

<P><STRONG><a name="[176]"></a>led_flash_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, led_flash.o(i.led_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = led_flash_init &rArr; led_flash_setTickTmr
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_setTickTmr
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
</UL>

<P><STRONG><a name="[10b]"></a>log</STRONG> (Thumb, 74 bytes, Stack size 288 bytes, user_log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = log &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_format
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Setup
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_write_profile
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_config_start_ic
</UL>

<P><STRONG><a name="[173]"></a>logInitial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user_log.o(i.logInitial))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
</UL>

<P><STRONG><a name="[16d]"></a>log_raw</STRONG> (Thumb, 58 bytes, Stack size 288 bytes, user_log.o(i.log_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = log_raw &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDev_cal_offset
</UL>

<P><STRONG><a name="[cb]"></a>main</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = main &rArr; boardInit &rArr; ADC_Setup &rArr; log &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskPolling
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardPreInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[193]"></a>outputCmd</STRONG> (Thumb, 574 bytes, Stack size 64 bytes, outputcmd.o(i.outputCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = outputCmd &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputCmdU8
</UL>

<P><STRONG><a name="[76]"></a>outputCmdU8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, outputcmd.o(i.outputCmdU8))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = outputCmdU8 &rArr; outputCmd &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.boardInit)
</UL>
<P><STRONG><a name="[177]"></a>outputDevSetup</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, output.o(i.outputDevSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = outputDevSetup &rArr; outputWritePinHEX
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputWritePinHEX
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
</UL>

<P><STRONG><a name="[73]"></a>print</STRONG> (Thumb, 56 bytes, Stack size 280 bytes, board.o(i.print))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forwardToBus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> board.o(i.boardInit)
<LI> board.o(i.brdCmd)
</UL>
<P><STRONG><a name="[6d]"></a>printS</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board.o(i.printS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = printS &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.boardInit)
</UL>
<P><STRONG><a name="[171]"></a>setupUartDev</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, uartdev.o(i.setupUartDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setupUartDev
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
</UL>

<P><STRONG><a name="[17a]"></a>setup_appTmr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_timer.o(i.setup_appTmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = setup_appTmr &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardPreInit
</UL>

<P><STRONG><a name="[178]"></a>setup_cmdConsumer</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, cmd_consumer.o(i.setup_cmdConsumer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setup_cmdConsumer &rArr; cmdConsumer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdConsumer_start
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
</UL>

<P><STRONG><a name="[17e]"></a>stmFlsh_Cmd</STRONG> (Thumb, 920 bytes, Stack size 264 bytes, stm_flash_cmd.o(i.stmFlsh_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2800 + Unknown Stack Size
<LI>Call Chain = stmFlsh_Cmd &rArr; stmFlsh_write &rArr; stmFlsh_format &rArr; log &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_print
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_write
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_read
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brdCmd
</UL>

<P><STRONG><a name="[183]"></a>stmFlsh_format</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm_flash.o(i.stmFlsh_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = stmFlsh_format &rArr; log &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_write
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brdCmd
</UL>

<P><STRONG><a name="[195]"></a>stmFlsh_print</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, stm_flash.o(i.stmFlsh_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stmFlsh_print &rArr; thread_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_Cmd
</UL>

<P><STRONG><a name="[6f]"></a>stmFlsh_read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm_flash.o(i.stmFlsh_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stmFlsh_read
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.boardInit)
</UL>
<P><STRONG><a name="[6e]"></a>stmFlsh_write</STRONG> (Thumb, 224 bytes, Stack size 2096 bytes, stm_flash.o(i.stmFlsh_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 2536 + Unknown Stack Size
<LI>Call Chain = stmFlsh_write &rArr; stmFlsh_format &rArr; log &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_delay
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_format
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.boardInit)
</UL>
<P><STRONG><a name="[172]"></a>strFormat</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, misc.o(i.strFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = strFormat &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
</UL>

<P><STRONG><a name="[165]"></a>taskIrq</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, task.o(i.taskIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = taskIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[78]"></a>taskPolling</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, task.o(i.taskPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = taskPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.boardPreInit)
</UL>
<P><STRONG><a name="[16c]"></a>thread_delay</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, thread_delay.o(i.thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_print
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmFlsh_write
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDev_cal_offset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDev_cal_gain
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_config_start_ic
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw221X_startActive
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw221X_sleep
</UL>

<P><STRONG><a name="[17b]"></a>thread_delay_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, thread_delay.o(i.thread_delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = thread_delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardPreInit
</UL>

<P><STRONG><a name="[71]"></a>usrRead</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, disk.o(i.usrRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usrRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.boardInit)
</UL>
<P><STRONG><a name="[70]"></a>usrWrite</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, disk.o(i.usrWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usrWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.boardInit)
</UL>
<P><STRONG><a name="[c5]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[56]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1d5]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1d6]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[a2]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[a6]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[154]"></a>MX_ADC1_Init</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, main.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>MX_GPIO_Init</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>MX_SPI1_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>MX_SPI2_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>MX_TIM5_Init</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, main.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15b]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>ADC_ConversionStop_Disable</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f3xx_hal_adc_ex.o(i.ADC_ConversionStop_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[107]"></a>ADC_Enable</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32f3xx_hal_adc_ex.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[124]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f3xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[11d]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f3xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[10e]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f3xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[119]"></a>FLASH_MassErase</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f3xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[5f]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f3xx_hal_spi.o(i.SPI_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f3xx_hal_spi.o(i.HAL_SPI_IRQHandler)
</UL>
<P><STRONG><a name="[131]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, stm32f3xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[133]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f3xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[134]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32f3xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[61]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f3xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f3xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[60]"></a>UART_DMARxOnlyAbortCallback</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f3xx_hal_uart.o(i.UART_DMARxOnlyAbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMARxOnlyAbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceiveCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f3xx_hal_uart.o(i.HAL_UART_AbortReceive_IT)
</UL>
<P><STRONG><a name="[13b]"></a>UART_EndRxTransfer</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32f3xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[6b]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, stm32f3xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RxISR_16BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f3xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[6a]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, stm32f3xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RxISR_8BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f3xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[63]"></a>UART_TxISR_16BIT</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f3xx_hal_uart.o(i.UART_TxISR_16BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32f3xx_hal_uart.o(i.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[62]"></a>UART_TxISR_8BIT</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32f3xx_hal_uart.o(i.UART_TxISR_8BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32f3xx_hal_uart.o(i.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[75]"></a>brdCmdU8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board.o(i.brdCmdU8))
<BR><BR>[Stack]<UL><LI>Max Depth = 2832 + Unknown Stack Size
<LI>Call Chain = brdCmdU8 &rArr; brdCmd &rArr; stmFlsh_Cmd &rArr; stmFlsh_write &rArr; stmFlsh_format &rArr; log &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brdCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.boardInit)
</UL>
<P><STRONG><a name="[72]"></a>forwardToBus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board.o(i.forwardToBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = forwardToBus &rArr; print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.boardInit)
</UL>
<P><STRONG><a name="[77]"></a>testHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(i.testHandler))
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.boardInit)
</UL>
<P><STRONG><a name="[80]"></a>led_flash_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, led_flash.o(i.led_flash_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = led_flash_handler &rArr; led_flash_setTickTmr
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_setTickTmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led_flash.o(i.led_flash_setTickTmr)
</UL>
<P><STRONG><a name="[190]"></a>led_flash_setTickTmr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, led_flash.o(i.led_flash_setTickTmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_flash_setTickTmr
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_answer
</UL>

<P><STRONG><a name="[8d]"></a>appTmr_isr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, app_timer.o(i.appTmr_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = appTmr_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer.o(i.setup_appTmr)
</UL>
<P><STRONG><a name="[8e]"></a>appTmr_polling</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_timer.o(i.appTmr_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = appTmr_polling
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer.o(i.setup_appTmr)
</UL>
<P><STRONG><a name="[8f]"></a>appTmr_start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_timer.o(i.appTmr_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = appTmr_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer.o(i.setup_appTmr)
</UL>
<P><STRONG><a name="[91]"></a>appTmr_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_timer.o(i.appTmr_status))
<BR>[Address Reference Count : 1]<UL><LI> app_timer.o(i.setup_appTmr)
</UL>
<P><STRONG><a name="[90]"></a>appTmr_stop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.appTmr_stop))
<BR>[Address Reference Count : 1]<UL><LI> app_timer.o(i.setup_appTmr)
</UL>
<P><STRONG><a name="[96]"></a>threadPollingHanlder</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, thread_delay.o(i.threadPollingHanlder))
<BR>[Address Reference Count : 1]<UL><LI> thread_delay.o(i.thread_delay_init)
</UL>
<P><STRONG><a name="[79]"></a>cmdConsumerTmr_handle</STRONG> (Thumb, 94 bytes, Stack size 280 bytes, cmd_consumer.o(i.cmdConsumerTmr_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = cmdConsumerTmr_handle &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_consumer.o(i.cmdConsumer_start)
</UL>
<P><STRONG><a name="[94]"></a>cmdConsumer_append</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, cmd_consumer.o(i.cmdConsumer_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cmdConsumer_append
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_consumer.o(i.setup_cmdConsumer)
</UL>
<P><STRONG><a name="[95]"></a>cmdConsumer_remove</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmd_consumer.o(i.cmdConsumer_remove))
<BR>[Address Reference Count : 1]<UL><LI> cmd_consumer.o(i.setup_cmdConsumer)
</UL>
<P><STRONG><a name="[92]"></a>cmdConsumer_start</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cmd_consumer.o(i.cmdConsumer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cmdConsumer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_cmdConsumer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_consumer.o(i.setup_cmdConsumer)
</UL>
<P><STRONG><a name="[93]"></a>cmdConsumer_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmd_consumer.o(i.cmdConsumer_stop))
<BR>[Address Reference Count : 1]<UL><LI> cmd_consumer.o(i.setup_cmdConsumer)
</UL>
<P><STRONG><a name="[8a]"></a>uartIsTxRBuffEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uartdev.o(i.uartIsTxRBuffEmpty))
<BR>[Address Reference Count : 1]<UL><LI> uartdev.o(i.setupUartDev)
</UL>
<P><STRONG><a name="[97]"></a>uartPolling</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uartdev.o(i.uartPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uartPolling &rArr; uartRxMonitor &rArr; RingBuffer_InsertMult
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxPolling
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRxMonitor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdev.o(i.uartStartRecv)
</UL>
<P><STRONG><a name="[87]"></a>uartRxFetchFrame</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, uartdev.o(i.uartRxFetchFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uartRxFetchFrame &rArr; RingBuffer_PopMult
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_PopMult
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_InsertMult
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdev.o(i.setupUartDev)
</UL>
<P><STRONG><a name="[86]"></a>uartRxFetchLine</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, uartdev.o(i.uartRxFetchLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = uartRxFetchLine &rArr; fetchLineFromRingBufferX &rArr; RingBuffer_PopMult
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetchLineFromRingBufferX
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdev.o(i.setupUartDev)
</UL>
<P><STRONG><a name="[85]"></a>uartRxMonitor</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, uartdev.o(i.uartRxMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uartRxMonitor &rArr; RingBuffer_InsertMult
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_InsertMult
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPolling
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdev.o(i.setupUartDev)
</UL>
<P><STRONG><a name="[89]"></a>uartSend</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, uartdev.o(i.uartSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uartSend &rArr; uartTxPolling &rArr; RingBuffer_PopMult
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_InsertMult
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxSendFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdev.o(i.setupUartDev)
</UL>
<P><STRONG><a name="[8b]"></a>uartStartRecv</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, uartdev.o(i.uartStartRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uartStartRecv &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTestRestartRecv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdev.o(i.setupUartDev)
</UL>
<P><STRONG><a name="[8c]"></a>uartTestRestartRecv</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uartdev.o(i.uartTestRestartRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uartTestRestartRecv &rArr; uartStartRecv &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive_IT
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStartRecv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdev.o(i.setupUartDev)
</UL>
<P><STRONG><a name="[84]"></a>uartTxPolling</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uartdev.o(i.uartTxPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uartTxPolling &rArr; RingBuffer_PopMult
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_PopMult
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSend
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPolling
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdev.o(i.setupUartDev)
</UL>
<P><STRONG><a name="[88]"></a>uartTxSendFrame</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, uartdev.o(i.uartTxSendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uartTxSendFrame &rArr; uartSend &rArr; uartTxPolling &rArr; RingBuffer_PopMult
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdev.o(i.setupUartDev)
</UL>
<P><STRONG><a name="[162]"></a>RingBuffer_IsEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ring_buffer.o(i.RingBuffer_IsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_PopMult
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
</UL>

<P><STRONG><a name="[15f]"></a>RingBuffer_IsFull</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ring_buffer.o(i.RingBuffer_IsFull))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_InsertMult
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Insert
</UL>

<P><STRONG><a name="[68]"></a>inputPolling</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, input.o(i.inputPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inputPolling
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> input.o(i.InputDevSetup)
</UL>
<P><STRONG><a name="[69]"></a>inputReadPin</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, input.o(i.inputReadPin))
<BR>[Address Reference Count : 1]<UL><LI> input.o(i.InputDevSetup)
</UL>
<P><STRONG><a name="[83]"></a>outputTogglePin</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, output.o(i.outputTogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = outputTogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> output.o(i.outputDevSetup)
</UL>
<P><STRONG><a name="[82]"></a>outputWritePin</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, output.o(i.outputWritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = outputWritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> output.o(i.outputDevSetup)
</UL>
<P><STRONG><a name="[81]"></a>outputWritePinHEX</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, output.o(i.outputWritePinHEX))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = outputWritePinHEX
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputDevSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> output.o(i.outputDevSetup)
</UL>
<P><STRONG><a name="[14a]"></a>IIC_RESTART</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, iic_io.o(i.IIC_RESTART))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_RESTART
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicioWrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicioRead
</UL>

<P><STRONG><a name="[14d]"></a>IIC_ReadByte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, iic_io.o(i.IIC_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicioRead
</UL>

<P><STRONG><a name="[14f]"></a>IIC_STOP</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, iic_io.o(i.IIC_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_STOP
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicioWrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicioRead
</UL>

<P><STRONG><a name="[150]"></a>IIC_WaitAck</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, iic_io.o(i.IIC_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicioWrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicioRead
</UL>

<P><STRONG><a name="[151]"></a>IIC_WriteByte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, iic_io.o(i.IIC_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicioWrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicioRead
</UL>

<P><STRONG><a name="[14c]"></a>IIC_delayUs</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iic_io.o(i.IIC_delayUs))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicioRead
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_STOP
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RESTART
</UL>

<P><STRONG><a name="[64]"></a>iic_io_Read</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, iic_io.o(i.iic_io_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iic_io_Read &rArr; iicioRead &rArr; IIC_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicioRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_io.o(i.IIC_IO_Setup)
</UL>
<P><STRONG><a name="[66]"></a>iic_io_Read_Reg16</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, iic_io.o(i.iic_io_Read_Reg16))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iic_io_Read_Reg16 &rArr; iicioRead &rArr; IIC_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicioRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_io.o(i.IIC_IO_Setup)
</UL>
<P><STRONG><a name="[65]"></a>iic_io_Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, iic_io.o(i.iic_io_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iic_io_Write &rArr; iicioWrite &rArr; IIC_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicioWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_io.o(i.IIC_IO_Setup)
</UL>
<P><STRONG><a name="[67]"></a>iic_io_Write_Reg16</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, iic_io.o(i.iic_io_Write_Reg16))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iic_io_Write_Reg16 &rArr; iicioWrite &rArr; IIC_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicioWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_io.o(i.IIC_IO_Setup)
</UL>
<P><STRONG><a name="[18e]"></a>iicioRead</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, iic_io.o(i.iicioRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iicioRead &rArr; IIC_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_delayUs
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_STOP
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RESTART
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_io_Read_Reg16
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_io_Read
</UL>

<P><STRONG><a name="[18f]"></a>iicioWrite</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, iic_io.o(i.iicioWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iicioWrite &rArr; IIC_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_STOP
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RESTART
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_io_Write_Reg16
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_io_Write
</UL>

<P><STRONG><a name="[57]"></a>adcDevRead</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, adc_dev.o(i.adcDevRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adcDevRead
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDevReadRaw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_dev.o(i.ADC_Setup)
</UL>
<P><STRONG><a name="[58]"></a>adcDevReadRaw</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, adc_dev.o(i.adcDevReadRaw))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDevRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_dev.o(i.ADC_Setup)
</UL>
<P><STRONG><a name="[59]"></a>adcDevStart</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, adc_dev.o(i.adcDevStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adcDevStart
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Setup
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDev_cal_offset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDev_cal_gain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_dev.o(i.ADC_Setup)
</UL>
<P><STRONG><a name="[5a]"></a>adcDevStop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adc_dev.o(i.adcDevStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adcDevStop &rArr; HAL_ADC_Stop &rArr; ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDev_cal_offset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDev_cal_gain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_dev.o(i.ADC_Setup)
</UL>
<P><STRONG><a name="[6c]"></a>adcDevTimHandler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, adc_dev.o(i.adcDevTimHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adcDevTimHandler &rArr; HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_dev.o(i.adcDevStart)
</UL>
<P><STRONG><a name="[5b]"></a>adcDev_cal_gain</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, adc_dev.o(i.adcDev_cal_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = adcDev_cal_gain &rArr; adcDevStop &rArr; HAL_ADC_Stop &rArr; ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_delay
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDevStop
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDevStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_dev.o(i.ADC_Setup)
</UL>
<P><STRONG><a name="[5c]"></a>adcDev_cal_offset</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, adc_dev.o(i.adcDev_cal_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = adcDev_cal_offset &rArr; log_raw &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_delay
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDevStop
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcDevStart
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_dev.o(i.ADC_Setup)
</UL>
<P><STRONG><a name="[5d]"></a>adcSaveCal</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, adc_dev.o(i.adcSaveCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adcSaveCal &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_dev.o(i.ADC_Setup)
</UL>
<P><STRONG><a name="[5e]"></a>adc_cal_reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, adc_dev.o(i.adc_cal_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_cal_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_dev.o(i.ADC_Setup)
</UL>
<P><STRONG><a name="[188]"></a>cw221X_get_state</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, cw2217.o(i.cw221X_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cw221X_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_init
</UL>

<P><STRONG><a name="[184]"></a>cw221X_sleep</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, cw2217.o(i.cw221X_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cw221X_sleep &rArr; thread_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_config_start_ic
</UL>

<P><STRONG><a name="[7e]"></a>cw221X_startActive</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, cw2217.o(i.cw221X_startActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cw221X_startActive &rArr; thread_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_config_start_ic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cw2217.o(i.cw2217_setup)
</UL>
<P><STRONG><a name="[185]"></a>cw_config_start_ic</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, cw2217.o(i.cw_config_start_ic))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = cw_config_start_ic &rArr; cw_write_profile &rArr; log &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_delay
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_write_profile
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw221X_startActive
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw221X_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_init
</UL>

<P><STRONG><a name="[7a]"></a>cw_get_chip_id</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, cw2217.o(i.cw_get_chip_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cw_get_chip_id
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cw2217.o(i.cw2217_setup)
</UL>
<P><STRONG><a name="[186]"></a>cw_get_current</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cw2217.o(i.cw_get_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cw_get_current &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_update_data
</UL>

<P><STRONG><a name="[7b]"></a>cw_get_voltage</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, cw2217.o(i.cw_get_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cw_get_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_update_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cw2217.o(i.cw2217_setup)
</UL>
<P><STRONG><a name="[7f]"></a>cw_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, cw2217.o(i.cw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = cw_init &rArr; cw_config_start_ic &rArr; cw_write_profile &rArr; log &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_delay
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_get_chip_id
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_config_start_ic
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw221X_get_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cw2217.o(i.cw2217_setup)
</UL>
<P><STRONG><a name="[7d]"></a>cw_update_data</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, cw2217.o(i.cw_update_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cw_update_data &rArr; cw_get_current &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_get_voltage
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_get_current
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cw2217.o(i.cw2217_setup)
</UL>
<P><STRONG><a name="[7c]"></a>cw_write_profile</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, cw2217.o(i.cw_write_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = cw_write_profile &rArr; log &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cw_config_start_ic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cw2217.o(i.cw2217_setup)
</UL>
<P><STRONG><a name="[53]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[f2]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
